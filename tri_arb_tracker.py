#!/usr/bin/env python3
"""
TriArbTracker ‚Äî –ø–æ–∏—Å–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ UniswapV2‚Äë—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö DEX.
"""

import os
import time
from itertools import combinations, permutations
from decimal import Decimal, getcontext

from web3 import Web3

# –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã
getcontext().prec = 28

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
RPC_URL        = os.getenv("ETH_RPC_URL")
FACTORY_ADDR   = os.getenv("FACTORY_ADDRESS")       # –∞–¥—Ä–µ—Å UniswapV2Factory
ROUTER_ADDR    = os.getenv("ROUTER_ADDRESS")        # –∞–¥—Ä–µ—Å UniswapV2Router02
TOKEN_LIST     = os.getenv("TOKEN_LIST", "")        # comma‚Äësep —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
MIN_PROFIT_USD = Decimal(os.getenv("MIN_PROFIT_USD", "10"))  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ USD
POLL_INTERVAL  = int(os.getenv("POLL_INTERVAL", "600"))      # —Å–µ–∫

if not all([RPC_URL, FACTORY_ADDR, ROUTER_ADDR, TOKEN_LIST]):
    print("‚ùó –ó–∞–¥–∞–π—Ç–µ ETH_RPC_URL, FACTORY_ADDRESS, ROUTER_ADDRESS –∏ TOKEN_LIST")
    exit(1)

w3 = Web3(Web3.HTTPProvider(RPC_URL))
if not w3.is_connected():
    print("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC‚Äë—É–∑–ª—É")
    exit(1)

FACTORY_ABI = [{
    "constant":True,"inputs":[],"name":"allPairsLength","outputs":[{"type":"uint256"}],"type":"function"
},{
    "constant":True,"inputs":[{"name":"","type":"uint256"}],"name":"allPairs","outputs":[{"name":"","type":"address"}],"type":"function"
}]

PAIR_ABI = [{
    "constant":True,"inputs":[],"name":"getReserves","outputs":[
        {"type":"uint112","name":"_reserve0"},
        {"type":"uint112","name":"_reserve1"},
        {"type":"uint32","name":"_blockTimestampLast"}],"type":"function"
},{
    "constant":True,"inputs":[],"name":"token0","outputs":[{"type":"address"}],"type":"function"
},{
    "constant":True,"inputs":[],"name":"token1","outputs":[{"type":"address"}],"type":"function"
}]

ROUTER_ABI = [{
    "name":"getAmountsOut","outputs":[{"type":"uint256[]","name":""}],
    "inputs":[{"type":"uint256","name":"amountIn"},{"type":"address[]","name":"path"}],
    "constant":True,"stateMutability":"view","type":"function"
}]

factory = w3.eth.contract(address=FACTORY_ADDR, abi=FACTORY_ABI)
router  = w3.eth.contract(address=ROUTER_ADDR,  abi=ROUTER_ABI)

# –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TOKENS = [w3.to_checksum_address(t.strip()) for t in TOKEN_LIST.split(",")]
print(f"üîç TriArbTracker: –ø—Ä–æ–≤–µ—Ä—è–µ–º {len(TOKENS)} —Ç–æ–∫–µ–Ω–æ–≤ ({len(TOKENS)*(len(TOKENS)-1)*(len(TOKENS)-2)/6:.0f} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤)")

def find_triangles(tokens):
    # –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ 3 —Ç–æ–∫–µ–Ω–∞
    return combinations(tokens, 3)

def simulate_triangle(tri, amount_in_wei):
    best = None
    # –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—É—Ç–∏ A‚ÜíB‚ÜíC‚ÜíA
    for path in permutations(tri, 3):
        # –¥–æ–±–∞–≤–∏–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É
        full_path = list(path) + [path[0]]
        try:
            amounts = router.functions.getAmountsOut(amount_in_wei, full_path).call()
        except Exception:
            continue
        profit_wei = amounts[-1] - amount_in_wei
        if profit_wei > 0:
            if best is None or profit_wei > best[1]:
                best = (full_path, profit_wei)
    return best

def main():
    # –≤–æ–∑—å–º—ë–º –∑–∞ –≤—Ö–æ–¥ 1 —Ç–æ–∫–µ–Ω –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –±–∞–∑–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1e18)
    sample_amount = 10**18
    while True:
        for tri in find_triangles(TOKENS):
            res = simulate_triangle(tri, sample_amount)
            if res:
                path, profit = res
                profit_eth = Decimal(profit) / Decimal(10**18)
                # –≥—Ä—É–±–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ ETH-USD oracle –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ ETH-–ø—Ä–∏–±—ã–ª—å
                if profit_eth * Decimal(2000) >= MIN_PROFIT_USD:
                    print(f"üí∞ –ê—Ä–±–∏—Ç—Ä–∞–∂: {'‚Üí'.join([t[:8] for t in path])} | –ø—Ä–∏–±—ã–ª—å ‚âà {profit_eth:.6f} ETH")
        print(f"–ñ–¥—ë–º {POLL_INTERVAL}s...\n")
        time.sleep(POLL_INTERVAL)

if __name__ == "__main__":
    main()
